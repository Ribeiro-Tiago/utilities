(function(){'use strict'; var self=this; var isValid=function(obj, errorHandle){var handleErrors=(typeof module !=='undefined' && typeof module.exports !=='undefined') ? false : (true || errorHandle); if (self.isEmpty(obj)) throw new Error("Invalid arguments!"); var errors=[]; var validate=function(input, rule, message, ruleValue, optional){var isinputDOM=(input.tagName); var inputValue=(isinputDOM) ? input.value : input; if (optional && self.isEmpty(inputValue)) return true; if (rule==="required"){if (self.isEmpty(inputValue)){errors.push({error: message || "Required field!", input: input});}}else if (rule==="number"){if (!self.isNumber(inputValue)){errors.push({error: message || "Numeric field!", input: input});}}else if (rule==="even"){if (!self.isEven(inputValue)){errors.push({error: message || "Value must be even!", input: input});}}else if (rule==="maxvalue"){if (!self.isNumber(ruleValue)) throw new Error ("Error validating maxvalue: value isn't number!"); if (parseInt(inputValue) > parseInt(ruleValue)){errors.push({error: message || "Value must be below " + ruleValue + "!", input: input});}}else if (rule==="minvalue"){if (!self.isNumber(ruleValue)) throw new Error ("Error validating maxvalue: value isn't number!"); if (parseInt(inputValue) < parseInt(ruleValue)){errors.push({error: message || "Value must be above " + ruleValue + "!", input: input});}}else if (rule==="positive"){if (!self.isPositive(inputValue)){errors.push({error: message || "Field must be positive!", input: input});}}else if (rule==="value"){var incorrectValue=function(value){return (parseInt(inputValue) !==parseInt(value));};var different=(self.isObject(ruleValue)) ? ruleValue.every(incorrectValue) : incorrectValue(ruleValue); if (different){errors.push({error: message || "Value must be one of the following: " + ruleValue + "!", input: input});}}else if (rule==="maxlen"){if (inputValue.length > ruleValue){errors.push({error: message || "Maximum value length: " + ruleValue + "!", input: input});}}else if (rule==="minlen"){if (inputValue.length < ruleValue){errors.push({error: message || "Minimum value length: " + ruleValue + "!", input: input});}}else if (rule==="email"){var regex=new RegExp(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/); if (!regex.test(inputValue)){errors.push({error: message || "Invalid email!", input: input});}}else if (rule==="equal"){var tmp=(ruleValue.tagName) ? ruleValue.value : ruleValue; if (inputValue !==tmp.value){errors.push({error: message || "Values don't match!", input: [input, tmp]});}}else if (rule==="phone"){var err=false; for (var index in ruleValue){var format=ruleValue[index]; if (err) break; for (var i=0; i < format.length; i++){if (format[i] !==inputValue[i]){err=true; errors.push({error: message || "Values don't match!", input: input}); break;}}};}else throw new Error("Invalid rule: !\n\tInput: " + input.name + "\n\tRule: " + rule);}; var parseObj=function(item){var rule=item.rule; var input=item.input; var parseInput=function(input){if (self.isArray(rule)){Array.prototype.forEach.call(rule, function(current, index){validate(input, current.rule, current.message, current.value, current.optional);});}else if (self.isObject(rule)) validate(input, rule.rule, rule.message, rule.value, rule.optional); else validate(input, rule, item.message, item.optional);};if (self.isArray(input)){Array.prototype.forEach.call(input, function(current){parseInput(current);})}else parseInput(input);};if (self.isArray(obj)){Array.prototype.forEach.call(obj, function(item){parseObj(item);});}else parseObj(obj); if (isFieldDOM){if (handleErrors){if (self.isEmpty(errors)){removeValdiationErrors(); return true;}handleValidationErrors(errors); return false;}}return self.isEmpty(errors);};var handleValidationErrors=function(errors){removeValdiationErrors(); var addValidationErrors=function(parent, err){if (parent.classList.has("error-wrapper") || parent.classList.has("has-error")) return; var div=document.createElement("div"); var span=document.createElement("span"); div.classList.add("error-wrapper"); parent.classList.add("has-error"); span.innerHTML=err; div.appendChild(span); parent.appendChild(div);};Array.prototype.forEach.call(errors, function(item, index){if (self.isArray(item.field)){Array.prototype.forEach.call(item.field, function(field){addValidationErrors(field.parentElement, item.error);})}else addValidationErrors(item.field.parentElement, item.error);});};var removeValdiationErrors=function(){var elems=document.getElementsByClassName("error-wrapper"); for (i=elems.length-1; i >=0; i--){elems[i].remove();}document.getElementsByClassName("has-error").forEach(function(elem){elem.classList.remove("has-error");});};var isNumber=function(value){var regex=new RegExp(/^[0-9]+$/); return (regex.test(parseInt(value)));};var isEmpty=function(value){return (value===void 0 || value==="" || value===null || String(value).toLocaleLowerCase()==="null" || value==="undefined" || (typeof value==="object" && Object.keys(value).length===0));};var isPositive=function(value){if (!isNumber(value)) throw Error("Value isn't a number!"); return (value >=0);};var isEven=function(value){if (!isNumber(value)) throw new Error("Value isn't a number"); return (value % 2===0);};var isArray=function(value){if (this.isEmpty(value)) throw new Error("Value is empty!"); return Object.prototype.toString.call(value)==='[object Array]';};var isObject=function(value){if (this.isEmpty(value)) throw new Error("Value is empty!"); return typeof value==="object";};var util={isValid, isNumber, isEmpty, isPositive, isEven, isArray, isObject}; if (typeof module !=='undefined' && typeof module.exports !=='undefined'){module.exports=util;}else if (typeof define==='function' && define.amd){define([], function(){return util;});}else{window.util=util;}})(); 