'use strict';function Validator(errors){var handleErrors=true || errors; var self=this; this.validateFields=function(fields){if (self.isEmpty(fields)) throw new Error("Invalid arguments!"); var errors=[]; var validate=function(field, rule, message, ruleValue){field=field[0]; if (rule==="required"){if (self.isEmpty(field.value)){errors.push({error: message || "Required field!", field: field});}}else if (rule==="number"){if (!self.isNumber(field.value)){errors.push({error: message || "Numeric field!", field: field});}}else if (rule==="even"){if (!self.isEven(field.value)){errors.push({error: message || "Value must be even!", field: field});}}else if (rule==="maxvalue"){if (!self.isNumber(ruleValue)) throw new Error ("Error validating maxvalue: value isn't number!"); if (parseInt(field.value) > parseInt(ruleValue)){errors.push({error: message || "Value must be below " + ruleValue + "!", field: field});}}else if (rule==="minvalue"){if (!self.isNumber(ruleValue)) throw new Error ("Error validating maxvalue: value isn't number!"); if (parseInt(field.value) < parseInt(ruleValue)){errors.push({error: message || "Value must be above " + ruleValue + "!", field: field});}}else if (rule==="positive"){if (!self.isPositive(field.value)){errors.push({error: message || "Field must be positive!", field: field});}}else if (rule==="value"){var different; var incorrectValue=function(value){return (parseInt(field.value) !==parseInt(value));};if (typeof ruleValue==="object") different=ruleValue.every(incorrectValue); else different=incorrectValue(ruleValue); if (different){errors.push({error: message || "Value must be one of the following: " + ruleValue + "!", field: field});}}else if (rule==="maxlen"){if (field.value.length > ruleValue){errors.push({error: message || "Maximum value length: " + ruleValue + "!", field: field});}}else if (rule==="minlen"){if (field.value.length < ruleValue){errors.push({error: message || "Minimum value length: " + ruleValue + "!", field: field});}}else if (rule==="email"){var regex=new RegExp(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/); if (!regex.test(field.value)){errors.push({error: message || "Invalid email!", field: field});}}else throw new Error("Invalid rule: !\n\tField: " + field.name + "\n\tRule: " + rule);}; fields.forEach(function(item, index){var rule=item.rule; var field=$(item.field); if (typeof rule==="object"){rule.forEach(function(itm, index){if (typeof itm==="object") validate(field, itm.rule, itm.message, itm.value); else validate(field, itm, itm.message, null);});}else validate(field, rule, item.message, (rule==="maxvalue" || rule==="minvalue" || "value") ? item.value : null);}); if (handleErrors){if (self.isEmpty(errors)){removeValdiationErrors(); return true;}handleValidationErrors(errors); return false;}else return self.isEmpty(errors);};var handleValidationErrors=function(errors){removeValdiationErrors(); errors.forEach(function(item, index){var parent=$(item.field).parent(); if (parent.hasClass("error-wrapper") || parent.hasClass("has-error")) return; parent.addClass("has-error"); parent.append($("<div class='error-wrapper'><span>" + item.error + "</span></div>"));});};var removeValdiationErrors=function(){var elements=$(".error-wrapper"); var current, parent; for (var i=elements.length - 1; i >=0; i--){current=elements[i]; parent=current.parentElement; current.removeClass("error-wrapper"); parent.removeClass("has-error"); parent.appendChild(current.childNodes[0]); parent.removeChild(current);}}};Validator.prototype.isNumber=function(value){var regex=new RegExp(/^[0-9]+$/); return (regex.test(parseInt(value)));};Validator.prototype.isEmpty=function(value){return (value===void 0 || value==="" || value===null || (typeof value==="object" && Object.keys(value).length===0));};Validator.prototype.isPositive=function(value){if (!isNumber(value)) throw Error("Value isn't a number!"); return (value >=0);};Validator.prototype.isEven=function(value){if (!isNumber(value)) throw new Error("Value isn't a number"); return (value % 2===0);}